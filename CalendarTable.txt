import React, { useState, useRef, useEffect } from 'react';
import useCalendarDays from '../hooks/useCalendarDays';
import { phaseStyles, newAppPhaseStyles, daysInMonth, monthNames } from '../constants/phaseStyles';

// --- Celdas vacías ---
type EmptyCellsProps = {
  from: number;
  to: number;
  className?: string;
};
const EmptyCells: React.FC<EmptyCellsProps> = ({ from, to, className }) => {
  const cellClass = className;
  return (
    <>
      {Array.from({ length: to - from + 1 }, (_, i) => (
        <td key={`empty-${from + i}`} className={`column${from + i} ${cellClass}`} />
      ))}
    </>
  );
};

EmptyCells.defaultProps = {
  className: 'style11 null',
};

type PaintMap = { [key: string]: string };

type CalendarTableProps = {
  paintMap: PaintMap;
  paintMode: boolean;
  freeDayMode: boolean;
  freeDays: Set<number>;
  onPaintCell: (row: number, col: number) => void;
  onMarkFreeDay: (col: number) => void;
  cellTexts: { [key: string]: string };
  setCellTexts: React.Dispatch<React.SetStateAction<{ [key: string]: string }>>;
  editTextsMode: boolean;
};

type PaintableDayCellProps = {
  row: number;
  col: number;
  className?: string;
  paintMap: PaintMap;
  paintMode: boolean;
  freeDayMode: boolean;
  freeDays: Set<number>;
  onPaintCell: (row: number, col: number) => void;
};

const PaintableDayCell: React.FC<PaintableDayCellProps> = ({
  row,
  col,
  className = 'style11 null',
  paintMap,
  paintMode,
  freeDayMode,
  freeDays,
  onPaintCell,
}) => {
  const paintKey = `${row}|${col}`;
  const paintedColor = paintMap[paintKey];
  const isFree = freeDays.has(col);

  let style: React.CSSProperties | undefined;
  if (isFree) {
    style = {
      background: '#e0e0e0',
      color: '#888',
      cursor: 'not-allowed',
      pointerEvents: 'none',
      opacity: 0.7,
    };
  } else if (paintedColor) {
    style = {
      background: paintedColor,
      cursor: paintMode ? 'pointer' : undefined,
    };
  } else if (paintMode) {
    style = { cursor: 'pointer' };
  }

  return (
    <td
      className={`column${col} ${className}`}
      style={style}
      onClick={!isFree && paintMode && !freeDayMode ? () => onPaintCell(row, col) : undefined}
      onKeyDown={
        !isFree && paintMode && !freeDayMode
          ? (e) => {
              if (e.key === 'Enter' || e.key === ' ') {
                onPaintCell(row, col);
              }
            }
          : undefined
      }
      tabIndex={!isFree && paintMode && !freeDayMode ? 0 : undefined}
      title={(() => {
        if (isFree) return 'Día libre';
        if (paintMode && !freeDayMode) return 'Pintar celda';
        return undefined;
      })()}
      aria-disabled={isFree ? 'true' : undefined}
    />
  );
};

PaintableDayCell.defaultProps = {
  className: 'style11 null',
};

type CalendarDayCellProps = {
  day: number;
  col: number;
  freeDayMode: boolean;
  freeDays: Set<number>;
  onMarkFreeDay: (col: number) => void;
};

const CalendarDayCell: React.FC<CalendarDayCellProps> = ({
  day,
  col,
  freeDayMode,
  freeDays,
  onMarkFreeDay,
}) => {
  const isFree = freeDays.has(col);
  let title: string | undefined;
  if (isFree) {
    title = 'Día libre';
  } else if (freeDayMode) {
    title = 'Marcar como día libre';
  } else {
    title = undefined;
  }

  return (
    <td
      className={`column${col} style11 n`}
      style={freeDayMode ? { cursor: 'pointer' } : undefined}
      onClick={freeDayMode && !isFree ? () => onMarkFreeDay(col) : undefined}
      onKeyDown={
        freeDayMode && !isFree
          ? (e) => {
              if (e.key === 'Enter' || e.key === ' ') {
                onMarkFreeDay(col);
              }
            }
          : undefined
      }
      tabIndex={freeDayMode && !isFree ? 0 : undefined}
      title={title}
      aria-disabled={isFree ? 'true' : undefined}
    >
      {day}
    </td>
  );
};

// --- EditableCell ---
type EditableCellProps = {
  row: number;
  col: number;
  value: string;
  className?: string;
  setCellTexts: React.Dispatch<React.SetStateAction<{ [key: string]: string }>>;
  colSpan?: number;
  rowSpan?: number;
  style?: React.CSSProperties;
  editTextsMode: boolean;
};

const EditableCell: React.FC<EditableCellProps> = ({
  row,
  col,
  value,
  className,
  setCellTexts,
  colSpan,
  rowSpan,
  style,
  editTextsMode,
  ...rest
}) => {
  const [editing, setEditing] = useState(false);
  const [tempValue, setTempValue] = useState(value);
  const inputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    if (editing && inputRef.current) {
      inputRef.current.focus();
      inputRef.current.select();
    }
  }, [editing]);

  useEffect(() => {
    setTempValue(value);
  }, [value]);

  const handleDoubleClick = () => {
    if (editTextsMode) setEditing(true);
  };

  const handleBlur = () => {
    setEditing(false);
    setCellTexts((prev) => ({
      ...prev,
      [`${row}|${col}`]: tempValue,
    }));
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      setEditing(false);
      setCellTexts((prev) => ({
        ...prev,
        [`${row}|${col}`]: tempValue,
      }));
    } else if (e.key === 'Escape') {
      setEditing(false);
      setTempValue(value);
    }
  };

  return (
    <td
      className={className}
      colSpan={colSpan}
      rowSpan={rowSpan}
      style={style}
      onDoubleClick={handleDoubleClick}
      {...rest}
    >
      {editing ? (
        <input
          ref={inputRef}
          value={tempValue}
          onChange={(e) => setTempValue(e.target.value)}
          onBlur={handleBlur}
          onKeyDown={handleKeyDown}
          style={{
            width: '100%',
            fontSize: 'inherit',
            fontFamily: 'inherit',
            border: '1px solid #7030a0',
            borderRadius: 4,
            padding: '2px 4px',
            boxSizing: 'border-box',
          }}
        />
      ) : (
        value
      )}
    </td>
  );
};

EditableCell.defaultProps = {
  className: 'style11 null',
  colSpan: undefined,
  rowSpan: undefined,
  style: undefined,
};

const CalendarTable: React.FC<CalendarTableProps> = ({
  paintMap,
  paintMode,
  freeDayMode,
  freeDays,
  onPaintCell,
  onMarkFreeDay,
  cellTexts,
  setCellTexts,
  editTextsMode,
}) => {
  const days = useCalendarDays();
  const colStart = 5;
  const colEnd = colStart + days.length - 1;

  const monthDayCols = days.map(({ col }) => <col key={`col-${col}`} className={`col${col}`} />);

  const monthColStart = (m: number) =>
    colStart + daysInMonth.slice(0, m).reduce((a, b) => a + b, 0);

  // Helper para obtener el texto editable o el default
  const getCellText = (row: number, col: number, defaultValue: string) =>
    cellTexts[`${row}|${col}`] !== undefined ? cellTexts[`${row}|${col}`] : defaultValue;

  return (
    <table id="sheet0" className="sheet0 gridlines">
      <col className="col0" />
      <col className="col1" />
      <col className="col2" />
      <col className="col3" />
      <col className="col4" />
      {monthDayCols}
      <tbody>
        {/* Fila 0 */}
        <tr className="row0">
          <EditableCell
            row={0}
            col={0}
            value={getCellText(0, 0, 'SOMOSBELCORP ECOSYSTEM')}
            className="column0 style1 s"
            colSpan={5}
            setCellTexts={setCellTexts}
            editTextsMode={editTextsMode}
          />
          {monthNames.map((month, m) => (
            <td
              key={`r0-m${month}`}
              className={`column${monthColStart(m)} style2 null`}
              colSpan={daysInMonth[m]}
            />
          ))}
        </tr>
        {/* Fila 1 */}
        <tr className="row1">
          <EditableCell
            row={1}
            col={0}
            value={getCellText(1, 0, 'IMPORTANT Commercial dates')}
            className="column0 style3 s"
            colSpan={5}
            setCellTexts={setCellTexts}
            editTextsMode={editTextsMode}
          />
          {monthNames.map((month, m) => (
            <td
              key={`r1-m${month}`}
              className={`column${monthColStart(m)} style4 null`}
              colSpan={daysInMonth[m]}
            />
          ))}
        </tr>
        {/* Fila 2 */}
        <tr className="row2">
          <EditableCell
            row={2}
            col={0}
            value={getCellText(2, 0, 'Release Plan')}
            className="column0 style5 s"
            colSpan={5}
            rowSpan={2}
            setCellTexts={setCellTexts}
            editTextsMode={editTextsMode}
          />
          {monthNames.map((month, m) => (
            <td
              key={`r2-m${month}`}
              className={`column${monthColStart(m)} style6 s`}
              colSpan={daysInMonth[m]}
            />
          ))}
        </tr>
        {/* Fila 3 */}
        <tr className="row3">
          {/* Nombres de los meses */}
          {(() => {
            let colIdx = 0;
            return monthNames.map((month, m) => {
              const colSpan = daysInMonth[m];
              const td = (
                <td
                  key={`r3-mname-${month}`}
                  className={`column${colStart + colIdx} style8 null`}
                  colSpan={colSpan}
                  style={{
                    textAlign: 'center',
                    fontWeight: 'bold',
                    fontSize: 13,
                    letterSpacing: 1,
                  }}
                >
                  {month}
                </td>
              );
              colIdx += colSpan;
              return td;
            });
          })()}
        </tr>
        {/* Fila 6 */}
        <tr className="row6">
          <EditableCell
            row={6}
            col={0}
            value={getCellText(6, 0, 'Scope')}
            className="column0 style9 s"
            colSpan={3}
            setCellTexts={setCellTexts}
            editTextsMode={editTextsMode}
          />
          <EditableCell
            row={6}
            col={3}
            value={getCellText(6, 3, 'Phase')}
            className="column3 style9 s"
            setCellTexts={setCellTexts}
            editTextsMode={editTextsMode}
          />
          <EditableCell
            row={6}
            col={4}
            value={getCellText(6, 4, 'Release \nNote')}
            className="column4 style10 s"
            setCellTexts={setCellTexts}
            style={{ whiteSpace: 'pre-line' }}
            editTextsMode={editTextsMode}
          />
          {/* Solo renderiza los días válidos */}
          {days.map(({ day, col }) => (
            <CalendarDayCell
              key={`daycell-${col}`}
              day={day}
              col={col}
              freeDayMode={freeDayMode}
              freeDays={freeDays}
              onMarkFreeDay={onMarkFreeDay}
            />
          ))}
        </tr>
        {/* Fila 7 */}
        <tr className="row7">
          <EditableCell
            row={7}
            col={0}
            value={getCellText(7, 0, 'VERSION:')}
            className="column0 style12 s"
            setCellTexts={setCellTexts}
            editTextsMode={editTextsMode}
          />
          <EditableCell
            row={7}
            col={1}
            value={getCellText(7, 1, '2.18.7')}
            className="column1 style13 s"
            setCellTexts={setCellTexts}
            editTextsMode={editTextsMode}
          />
          <EditableCell
            row={7}
            col={2}
            value={getCellText(7, 2, 'COMPONENTS:')}
            className="column2 style12 s"
            setCellTexts={setCellTexts}
            editTextsMode={editTextsMode}
          />
          <EditableCell
            row={7}
            col={3}
            value={getCellText(7, 3, 'WEB + BACKEND')}
            className="column3 style13 s"
            setCellTexts={setCellTexts}
            editTextsMode={editTextsMode}
          />
          <EditableCell
            row={7}
            col={4}
            value={getCellText(7, 4, 'INFO')}
            className="column4 style14 s"
            setCellTexts={setCellTexts}
            style={{ color: '#000' }}
            editTextsMode={editTextsMode}
          />
          <EmptyCells from={colStart} to={colEnd} className="style15 null" />
        </tr>
        {/* Fila 8 */}
        <tr className="row8">
          <EditableCell
            row={8}
            col={0}
            value={getCellText(
              8,
              0,
              `SBR Release Web\n\nBackEnd New App 1.1.0 (3 tickets)\nPR - USA New Home Update - FF = OFF\n\nFeatures:`
            )}
            className="column0 style16 s"
            colSpan={3}
            rowSpan={15}
            setCellTexts={setCellTexts}
            style={{
              whiteSpace: 'pre-line',
              fontWeight: 'bold',
              color: '#000',
              fontFamily: 'Calibri',
              fontSize: '14pt',
            }}
            editTextsMode={editTextsMode}
          />
          <EditableCell
            row={8}
            col={3}
            value={getCellText(8, 3, 'Sprint - Planning')}
            className="column3 style17 s"
            setCellTexts={setCellTexts}
            editTextsMode={editTextsMode}
          />
          <td className="column4 style4" rowSpan={15} />
          {/* Solo renderiza los días válidos */}
          {days.map(({ col }) => (
            <PaintableDayCell
              key={`r8-c${col}`}
              row={8}
              col={col}
              className="style11 null"
              paintMap={paintMap}
              paintMode={paintMode}
              freeDayMode={freeDayMode}
              freeDays={freeDays}
              onPaintCell={onPaintCell}
            />
          ))}
        </tr>
        {/* Filas 9-22: phaseStyles */}
        {phaseStyles.map((phase, idx) => (
          <tr key={`phase-${9 + idx}`} className={`row${9 + idx}`}>
            <EditableCell
              row={9 + idx}
              col={3}
              value={getCellText(9 + idx, 3, phase.text)}
              className={`column3 ${phase.class} s`}
              setCellTexts={setCellTexts}
              editTextsMode={editTextsMode}
            />
            {/* columna4 (rosa) se mantiene */}
            {days.map(({ col }) => (
              <PaintableDayCell
                key={`phase-${9 + idx}-col${col}`}
                row={9 + idx}
                col={col}
                className="style11 null"
                paintMap={paintMap}
                paintMode={paintMode}
                freeDayMode={freeDayMode}
                freeDays={freeDays}
                onPaintCell={onPaintCell}
              />
            ))}
          </tr>
        ))}
        {/* Fila 23 */}
        <tr className="row23">
          <EditableCell
            row={23}
            col={0}
            value={getCellText(23, 0, 'VERSION:')}
            className="column0 style33 s"
            setCellTexts={setCellTexts}
            editTextsMode={editTextsMode}
          />
          <EditableCell
            row={23}
            col={1}
            value={getCellText(23, 1, '1.1.0')}
            className="column1 style34 s"
            setCellTexts={setCellTexts}
            editTextsMode={editTextsMode}
          />
          <EditableCell
            row={23}
            col={2}
            value={getCellText(23, 2, 'COMPONENTS:')}
            className="column2 style33 s"
            setCellTexts={setCellTexts}
            editTextsMode={editTextsMode}
          />
          <EditableCell
            row={23}
            col={3}
            value={getCellText(23, 3, 'NEW APP')}
            className="column3 style34 s"
            setCellTexts={setCellTexts}
            editTextsMode={editTextsMode}
          />
          <EditableCell
            row={23}
            col={4}
            value={getCellText(23, 4, 'INFO')}
            className="column4 style35 s"
            setCellTexts={setCellTexts}
            style={{ color: '#000' }}
            editTextsMode={editTextsMode}
          />
          <EmptyCells from={colStart} to={colEnd} className="style36 null" />
        </tr>
        {/* Fila 24 */}
        <tr className="row24">
          <EditableCell
            row={24}
            col={0}
            value={getCellText(
              24,
              0,
              `Release Beta: 07/04/2025\nRelease Date: 14/04/2025\n\nFeatures:\nPR - USA New Home Update\nNew App 1.1.0 (3 tickets) Fixes\nPR - USA New Home Update - FF = ON`
            )}
            className="column0 style38 s"
            colSpan={3}
            rowSpan={14}
            setCellTexts={setCellTexts}
            style={{ whiteSpace: 'pre-line', fontFamily: 'Calibri', fontSize: '14pt' }}
            editTextsMode={editTextsMode}
          />
          <EditableCell
            row={24}
            col={3}
            value={getCellText(24, 3, 'Development . JM')}
            className="column3 style19 s"
            setCellTexts={setCellTexts}
            editTextsMode={editTextsMode}
          />
          <td className="column4 style42 null" rowSpan={14} />
          {/* Solo renderiza los días válidos */}
          {days.map(({ col }) => (
            <PaintableDayCell
              key={`r24-c${col}`}
              row={24}
              col={col}
              className="style11 null"
              paintMap={paintMap}
              paintMode={paintMode}
              freeDayMode={freeDayMode}
              freeDays={freeDays}
              onPaintCell={onPaintCell}
            />
          ))}
        </tr>
        {/* Filas NewAppPhaseRows */}
        {newAppPhaseStyles.map((phase, idx) => (
          <tr key={`newapp-${25 + idx}`} className={`row${25 + idx}`}>
            <EditableCell
              row={25 + idx}
              col={3}
              value={getCellText(25 + idx, 3, phase.text)}
              className={`column3 ${phase.class} s`}
              setCellTexts={setCellTexts}
              editTextsMode={editTextsMode}
            />
            {/* columna4 eliminada */}
            {days.map(({ col }) => {
              const isLastRow = idx === newAppPhaseStyles.length - 1;
              // Cambia la lógica para que la celda especial tenga ambas clases
              const styleClass = isLastRow && col === 8 ? 'style44 style45' : 'style44';
              return (
                <PaintableDayCell
                  key={`newapp-${25 + idx}-col${col}`}
                  row={25 + idx}
                  col={col}
                  className={`${styleClass} null`}
                  paintMap={paintMap}
                  paintMode={paintMode}
                  freeDayMode={freeDayMode}
                  freeDays={freeDays}
                  onPaintCell={onPaintCell}
                />
              );
            })}
          </tr>
        ))}
      </tbody>
    </table>
  );
};

export default CalendarTable;
